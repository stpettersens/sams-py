#!/usr/bin/python
"""
Automaton
Scriptable host interaction client
Copyright (c) 2010 Sam Saint-Pettersen

Released under the MIT License.
"""
import sys
import os
import getopt
import socket
import signal
import json
import uuid
import re

class AIS_Engine:
	"""
	Script engine to execute commands in a script
	"""
	def __init__(self):
		pass

	def parse(self, command):
		return 'a'

class ScriptLoader:
	"""
	Script loader to execute a script on host machine
	"""
	def __init__(self, conn, debug):
		"""
		Initialization method for script thread
		"""
		self.debug = debug
		self.conn = conn

	def execute(self, script):
		print('Executing \'{script}\'...\n'.format(script=script))

		# Read script file line-by-line, parse each command in file
		engine = AIS_Engine()
		x = engine.parse('pineapple')

		print('Done.')

class Connection:
	"""
	Connection class to connect to target host
	(One and only instance)
	"""
	def __init__(self, debug, host, port, script):
		"""
		Initialization method for connection thread
		"""
		self.debug = debug
		self.host = host
		self.port = port
		self.script = script
		self.connectQueue()

	def connectQueue(self):
		"""
		Connect to target host and queue and parse on scripts to script loader
		"""
		try:
			print('\nConnecting to {host}:{port}...'.format(host=self.host, port=self.port))
			s = socket.socket(socket.AF_INET, socket.SOCK_STREAM)
			s.connect((self.host, self.port))
	
			scriptLoader = ScriptLoader(s, self.debug)
			scriptLoader.execute(self.script)

			s.close()

		except socket.error:
			print('Error: Could not connect to host.')
			sys.exit(1)

class Automaton:
	"""
	Automation instance class
	(One and only instance)
	"""
	def __init__(self):
		"""
		Initialization method for Automation
		"""
		# Application information
		self.Name = 'Automaton'
		self.Vers = '1.0'
		#
		self.ConfFile = 'automaton.conf.json'
		self.termSig = False # Termination control variable

		# Configuration to use:
		#  x signature (Default: autogenerated uuid)
		# -h hostname (Default: 'localhost')
		# -p port num.(Default: 8282)
		# -d use debug (Default: False)
		self.config = ({
		'x':'{signature}'.format(signature=uuid.uuid4()), 
		'-h':'localhost', '-p':8282, '-d':False
		})

		methods = ({
		'-i':'displayCmdLineOps()', '-v':'displayInfo()'
		})

		# Allow configuration file to overwrite defaults
		self.config = self.loadConfig()

		# Add -s (script) option
		self.config['-s'] = 'dummy.ais'

		# Handle command line options
		try:
			opts, args = getopt.getopt(sys.argv[1:],'ivbch:p:s:')
			for o, a in opts:
				if a != '': self.config[o] = a
				else: eval('self.{method}'.format(method=methods[o]))

		# Handle invalid command line options
		except getopt.GetoptError, err:
			err = str(err)
			err = err.capitalize()
			print('\nError: {err}.'.format(err=err))
			self.displayCmdLineOps()

		# Handle absence of command line options
		if len(sys.argv) == 1:
			print('\nError: No options or arguments provided.')
			self.displayCmdLineOps()

		# Handle port not being an unsigned integer
		if not str(self.config['-p']).isdigit() or int(self.config['-p']) < 0:
			print('\nError: Port must be an unsigned integer, not \'{0}\'.'.format(a))
			self.displayCmdLineOps()

		print(__doc__)
		print('Hold Ctrl-C to terminate.')
		Connection(self.config['-d'], self.config['-h'], int(self.config['-p']), self.config['-s'])
		while not self.termSig:
			signal.signal(signal.SIGINT, self.quit)
			if self.termSig: sys.exit(0)

	def displayCmdLineOps(self):
		"""
		Display command line options
		"""
		print(__doc__)
		print('Usage: {program} [-i|-h|-v|-b|-c]'.format(program=sys.argv[0])
		+ '\n[-d -h <hostname> -p <port number>] -s <script>\n')
		print('-i: Display this information.')
		print('-v: Display version information and signature.')
		print('-b: Display built-in commands.')
		print('-c: Display defined commands and variables.')
		print('-d: Display debug information while running.')
		print('-h: Hostname to connect to. (Default: As script or {host})'
		.format(host=self.config['-h']))
		print('-p: Listen on specified port number. (Default: As script or {port})'
		.format(port=self.config['-p']))
		print('-s: Script to execute; *.ais file.')
		sys.exit(0)

	def	displayInfo(self):
		print('\n{app} {ver} ({plat}/{os})'
		.format(app=self.Name, ver=self.Vers, plat=sys.platform, os=os.name))
		print('\nSecurity signature:\n\n{sig}'.format(sig=self.config['x']))
		sys.exit(0)

	def loadConfig(self):
		try:
			return json.load(open(self.ConfFile, 'r'))

		except IOError:
			# Write configuration when not found, such as first run
			json.dump(self.config, open(self.ConfFile, 'w'))
			print('\n(Re)wrote configuration file...')
			print('If this is first run, ignore and run again.')
			sys.exit(0)

	def quit(self, signum, frame):
		print('\nClient terminated.\n')
		self.termSig = True

if __name__ == '__main__': Automaton()
